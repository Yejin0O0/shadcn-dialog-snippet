export const CheckBoxColumnFormBaseString =
  'import { Button } from "@/components/ui/button";\nimport { Checkbox } from "@/components/ui/checkbox";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from "@/components/ui/dialog";\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from "@/components/ui/form";\nimport { zodResolver } from "@hookform/resolvers/zod";\nimport { useForm } from "react-hook-form";\nimport { z } from "zod";\n\nconst items = [\n  {\n    id: "item1",\n    label: "Item1",\n  },\n  {\n    id: "item2",\n    label: "Item2",\n  },\n  {\n    id: "item3",\n    label: "Item3",\n  },\n];\n\nconst FormSchema = z.object({\n  items: z.array(z.string()).refine((value) => value.some((item) => item), {\n    message: "You have to select at least one item.",\n  }),\n});\n\nexport function CheckBoxColumnFormBase() {\n  const form = useForm<z.infer<typeof FormSchema>>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      items: ["item1"],\n    },\n    mode: "onChange",\n  });\n\n  const onSubmit = (data: z.infer<typeof FormSchema>) => {\n    alert(data.items);\n  };\n\n  return (\n    <Dialog>\n      <DialogTrigger asChild>\n        <Button variant="outline">Checkbox Column Form</Button>\n      </DialogTrigger>\n      <DialogContent>\n        <DialogHeader>\n          <DialogTitle>Checkbox Column Form</DialogTitle>\n        </DialogHeader>\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">\n            <FormField\n              control={form.control}\n              name="items"\n              render={() => (\n                <FormItem>\n                  <div className="mb-4">\n                    <FormLabel className="text-base">Items Title</FormLabel>\n                    <FormDescription>Write your description</FormDescription>\n                  </div>\n                  <div className="flex justify-between">\n                    {items.map((item) => (\n                      <FormField\n                        key={item.id}\n                        control={form.control}\n                        name="items"\n                        render={({ field }) => {\n                          return (\n                            <FormItem\n                              key={item.id}\n                              className="flex flex-row items-center space-x-3 space-y-0"\n                            >\n                              <FormControl>\n                                <Checkbox\n                                  checked={field.value?.includes(item.id)}\n                                  onCheckedChange={(checked) => {\n                                    return checked\n                                      ? field.onChange([\n                                          ...field.value,\n                                          item.id,\n                                        ])\n                                      : field.onChange(\n                                          field.value?.filter(\n                                            (value) => value !== item.id,\n                                          ),\n                                        );\n                                  }}\n                                />\n                              </FormControl>\n                              <FormLabel className="font-normal">\n                                {item.label}\n                              </FormLabel>\n                            </FormItem>\n                          );\n                        }}\n                      />\n                    ))}\n                  </div>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            <div className="flex justify-end">\n              <Button type="submit" className="ml-auto">\n                Submit\n              </Button>\n            </div>\n          </form>\n        </Form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n';
